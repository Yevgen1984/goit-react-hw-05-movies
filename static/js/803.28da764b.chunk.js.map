{"version":3,"file":"static/js/803.28da764b.chunk.js","mappings":"+PAEaA,EAAW,SAAC,GAA2B,IAAbC,EAAY,EAAxBC,UAAYD,KAErC,OACE,yBACGA,EAAKE,OAAS,GACb,wBACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,2BACE,0BACE,gBACEC,IACEF,EAAY,0CAC2BA,GACnC,uCAENG,IAAKJ,OAGT,4BACE,uBAAIA,KACJ,uCAAeE,UAbVH,EADD,OAoBZ,oDAIP,E,SCKD,EA/BiB,WAEf,OAAkCM,EAAAA,EAAAA,UAAS,MAA3C,eAAOT,EAAP,KAAkBU,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMH,GAAN,8EACfH,GAAa,GADE,kBAGcO,EAAAA,EAAAA,eAAyBJ,GAHvC,OAGPK,EAHO,OAIbV,EAAaU,GAJA,gDAMbN,EAAS,KAAMO,SANF,yBAQbT,GAAa,GARA,4EAAH,sDAYdM,EAASH,EACV,GAAE,CAACA,KAEF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,mDACTb,IAAa,SAACF,EAAD,CAAUE,UAAWA,MAGxC,C","sources":["components/Cast/Cast.jsx","Pages/CastPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const CastList = ({ movieInfo: {cast} }) => {\n   \n  return (\n    <div>\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li key={id}>\n              <div>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : 'https://i.ibb.co/bPtNcLX/NoImage.png'\n                  }\n                  alt={name}\n                />\n              </div>\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We have no more details</p>\n      )}\n    </div>\n  );\n};\n\nCastList.propTypes = {\n  info: PropTypes.shape({\n    cast: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\n// import { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { CastList } from '../components/Cast/Cast';\nimport { MoviesAPI } from '../servises/MoviesApi';\nconst CastPage = () => {\n  //   const { movieInfo, isLoading, error } = FetchMovieCast('movieId');\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieCast(movieId);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We have no more details</p>}\n      {movieInfo && <CastList movieInfo={movieInfo} />}\n    </>\n  );\n};\n\nexport default CastPage;\n"],"names":["CastList","cast","movieInfo","length","map","id","name","profile_path","character","src","alt","useState","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovie","MoviesAPI","movieDetails","message","Loader"],"sourceRoot":""}