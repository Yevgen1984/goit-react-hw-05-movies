{"version":3,"file":"static/js/216.8d660172.chunk.js","mappings":"2OA4FA,UApFsB,WAAO,IAAD,UAE1B,GAAkCA,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,OAEnBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMP,GAAN,8EACfH,GAAa,GADE,kBAGcW,EAAAA,EAAAA,eAAyBR,GAHvC,OAGPS,EAHO,OAIbC,QAAQC,IAAIF,GACZd,EAAac,GALA,gDAObV,EAAS,KAAMa,SAPF,yBASbf,GAAa,GATA,4EAAH,sDAadU,EAASP,EACV,GAAE,CAACA,IAOJ,OAFAU,QAAQC,IAAIjB,IAGV,gCACGE,IAAa,SAAC,IAAD,IACbF,IACC,iCACE,mBAAQmB,KAAK,SAASC,QAVX,WAAO,IAAD,IACvBV,EAAU,iBAACF,QAAD,IAACA,GAAD,UAACA,EAAUa,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IACrC,EAQO,sBAGA,4BACE,0BACE,gBACEC,IAAG,yCAAoCvB,EAAUwB,aACjDC,IAAG,oBACDzB,EAAU0B,aADT,QACkB1B,EAAU2B,qBAD5B,QAC6C3B,EAAU4B,UAI9D,4BACE,8CACG5B,EAAU0B,aADb,QACsB1B,EAAU2B,qBADhC,QACiD3B,EAAU4B,KAD3D,KAEG,IAAIC,KAAK7B,EAAU8B,cAAcC,cAFpC,QAIA,wCAAgBC,KAAKC,MAA+B,GAAzBjC,EAAUkC,cAArC,SACA,oCACA,iCAAIlC,EAAUmC,cAAd,aAAI,EAAkBC,KAAI,qBAAGR,IAAH,IAAoBS,KAAK,SACnD,sCACA,uBAAIrC,EAAUsC,kBAGlB,oDACA,2BACE,yBACE,SAAC,IAAD,CAAUC,GAAG,OAAOlB,MAAOb,EAASa,MAApC,qBAIF,yBACE,SAAC,IAAD,CAAUkB,GAAG,UAAUlB,MAAOb,EAASa,MAAvC,6BAOPjB,IAAS,mCACV,SAAC,EAAAoC,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["Pages/MoviesDetails.jsx"],"sourcesContent":["import { Outlet, useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\n// import { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { MoviesAPI } from 'servises/MoviesApi';\n// import { Movie } from 'components/Movie/Movie';\nimport { Loader } from '../components/Loader/Loader';\nimport { LinkItem } from '../components/Navigation/Navigation.styled';\n\nconst MoviesDetails = () => {\n  // const { movieInfo, isLoading, error } = useFetchMovieInfo();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const navigation = useNavigate();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieById(movieId);\n        console.log(movieDetails);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n\n  const onBtnClick = () => {\n    navigation(location?.state?.from ?? '/');\n  };\n  console.log(movieInfo);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movieInfo && (\n        <>\n          <button type=\"button\" onClick={onBtnClick}>\n            Go back\n          </button>\n          <div>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${movieInfo.poster_path}`}\n                alt={\n                  movieInfo.title ?? movieInfo.original_name ?? movieInfo.name\n                }\n              />\n            </div>\n            <div>\n              <h2>\n                {movieInfo.title ?? movieInfo.original_name ?? movieInfo.name} (\n                {new Date(movieInfo.release_date).getFullYear()})\n              </h2>\n              <p>User score: {Math.round(movieInfo.vote_average * 10)} %</p>\n              <h3>Genres</h3>\n              <p>{movieInfo.genres?.map(({ name }) => name).join(', ')}</p>\n              <h3>Overview</h3>\n              <p>{movieInfo.overview}</p>\n            </div>\n          </div>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <LinkItem to=\"cast\" state={location.state}>\n                Cast\n              </LinkItem>\n            </li>\n            <li>\n              <LinkItem to=\"reviews\" state={location.state}>\n                Reviews\n              </LinkItem>\n            </li>\n          </ul>\n        </>\n      )}\n      {error && <p>Ooops!</p>}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","navigation","useNavigate","useEffect","getMovie","MoviesAPI","movieDetails","console","log","message","type","onClick","state","from","src","poster_path","alt","title","original_name","name","Date","release_date","getFullYear","Math","round","vote_average","genres","map","join","overview","to","Suspense","fallback"],"sourceRoot":""}