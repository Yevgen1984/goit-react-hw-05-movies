{"version":3,"file":"static/js/304.39489e45.chunk.js","mappings":"+PAEaA,EAAa,SAAC,GAAgC,IAAjBC,EAAgB,EAA7BC,UAAaD,QAExC,OADAE,QAAQC,IAAIH,IAEV,yBACGA,EAAQI,OAAS,GAChB,wBACGJ,EAAQK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uCAAeC,OAFRF,EADE,OAQf,qEAIP,E,SCgBD,EA9BoB,WAClB,OAAkCG,EAAAA,EAAAA,UAAS,MAA3C,eAAOR,EAAP,KAAkBS,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMH,GAAN,8EACfH,GAAa,GADE,kBAGcO,EAAAA,EAAAA,kBAA4BJ,GAH1C,OAGPK,EAHO,OAIbV,EAAaU,GAJA,gDAMbN,EAAS,KAAMO,SANF,yBAQbT,GAAa,GARA,4EAAH,sDAYdM,EAASH,EACV,GAAE,CAACA,KAEF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,oEACTZ,IAAa,SAACF,EAAD,CAAYE,UAAWA,MAG1C,C","sources":["components/Reviews/Reviews.jsx","Pages/ReviewsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const ReviewList = ({ movieInfo: { results } }) => {\n  console.log(results);\n  return (\n    <div>\n      {results.length > 0 ? (\n        <ul>\n          {results.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>Character: {content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </div>\n  );\n};\n\nReviewList.propTypes = {\n  info: PropTypes.shape({\n    results: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\nimport { ReviewList } from '../components/Reviews/Reviews';\nimport { MoviesAPI } from '../servises/MoviesApi';\n\nconst ReviewsPage = () => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieReviews(movieId);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We don't have any reviews for this movie</p>}\n      {movieInfo && <ReviewList movieInfo={movieInfo} />}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["ReviewList","results","movieInfo","console","log","length","map","id","author","content","useState","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovie","MoviesAPI","movieDetails","message","Loader"],"sourceRoot":""}